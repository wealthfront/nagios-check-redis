#!/usr/bin/env ruby

require 'optparse'
require 'rubygems'
require 'redis'

options = {:host => 'localhost',
          :port => 6379,
          :db => 0,
          :password => nil,
          :timeout => 3,
          :lag_io => 30,
          :max_io => 300}

optparser = OptionParser.new do |opt|
  opt.banner = "Usage: #{$0} -H <hostname> [options]"
  opt.on('-H', '--host HOSTNAME', 'Hostname') {|o| options[:host] = o if o }
  opt.on('-p', '--port', 'Port (Default: "6379")') {|o| options[:port] = o if o }
  opt.on('-P', '--password PASSWORD', 'Password (Default: blank)') {|o| options[:password] = o if o }
  opt.on('-T', '--timeout', 'Timeout in seconds (Default: 3)') {|o| options[:timeout] = o if o }
  opt.on('-M', '--max_io SECONDS', "Max master_last_io_seconds") {|o| options[:max_io] = o.to_i if o}
  opt.on('-L', '--lag_io SECONDS', "Max master_last_io_seconds") {|o| options[:lag_io] = o.to_i if o}
end

args = []
begin
  args = optparser.parse!
rescue => e
  puts "UNKNOWN: blew up parsing options #{e.to_s}"
  exit 4
end

class CheckRedisReplication
  KEYS = %w(master_host master_last_io_seconds_ago master_link_status role)

  def initialize(opts)
    @options = opts
  end

  def check
    process Redis.new(@options)
  rescue Errno::ECONNREFUSED
    puts "CRITICAL: Connection refused."
    exit 2
  rescue Errno::ENETUNREACH
    puts "CRITICAL: Network is unreachable."
    exit 2
  rescue Errno::EHOSTUNREACH
    puts "CRITICAL: No route to host."
    exit 2
  end

  private

  def process(redis)
    parse redis.info
    status = get_status
    if (@role == "slave" && @master_link_status == "up" && @last_io)
      if (@last_io.to_i < @options[:lag_io])
        puts "OK: #{status}"
        exit 0
      elsif (@last_io.to_i < @options[:max_io])
        puts "WARNING: LAG #{status}"
        exit 1
      else
        puts "CRITICAL: LINK TIMEOUT #{status}"
        exit 2
      end
    else
      puts "CRITICAL: LINK DOWN #{status}"
      exit 2
    end
  end

  def get_status
    "#{@role} of #{@master_host} link #{@master_link_status}|last_io=#{@last_io}s"
  end

  def parse(info)
    info.each do |key,value|
      send("parse_#{key}".to_sym, value) if KEYS.include? key.to_s
    end
  end

  def parse_role(value)
    @role = value
  end
  
  def parse_master_host(value)
    @master_host = value
  end

  def parse_master_last_io_seconds_ago(value)
    @last_io = value
  end

  def parse_master_link_status(value)
    @master_link_status = value
  end
end

CheckRedisReplication.new(options).check
